*** Intro to SED (Stream Editor) ***
------------------------------------

 Usage:
  1. sed [options] 'instruction' file | PIPE | STDIN
  2. sed -e 'instruction1' -e 'instruction2' ...
  3. sed -f script_file_name file
 Note: Execute sed by indicating on one of the following:
  1. Command-line
  2. Script file
 
 Note: Sed accepts instructions based on '/patters_to_match/action'
 *** Print specific lines of a file ***
 Note: -e is optional if there is only 1 instruction to execute
 sed -ne '1p' animals.txt  -  prints 1st line of the text
	1 - Line number 1
	p - Print
 sed -ne '2p' animals.txt - prints 2nd line of the text
 sed -ne '$p' animals.txt - prints last printable line of the file
 sed -ne '2,4p' animals.txt - prints lines 2-4 from file
 sed -ne '1!p' animals .txt - prints all lines except line #1
 sed -ne '1,4!p' animals .txt - prints all lines except line 1 - 4
 sed -ne '/dog/p' animals.txt - prints all lines containing 'dog' - case-sensitive
 sed -ne '/dog/Ip' animals.txt - prints all lines containing 'dog' - case-insensitive
 sed -ne '/[0-9]/p' animals.txt - prints ALL lines with atleast 1 numeric
 sed -ne '/cat/,/deer/p' animals.txt - prints ALL lines beginning with 'cat' ending with 'deer'
 sed -ne '/deer/,+2p' animals.txt - prints the line with 'deer' plus 2 extra lines
 
 *** Delete lines using SED addresses ***
 sed -ne '/^$/d' animals.txt - deletes blank lines from file
 Note: Drop '-n' to see the new output when deleting
 
 sed -e '1~2d' animals.txt - deletes every 2nd line beginning with line 1 - prints 1,3,5
 
 *** Save SED's changes using Output Redirection ***
 sed -ne '/^$/d' animals.txt > animals2.txt - deletes blank lines from file and created a new 
	file named animals2.txt
 
 
 *** Search and replace using SED ***
 General Usage:
 sed -e 's/find/replace/g' animals.txt - replaces 'find' with 'replace'
 Note: Left Hand Side (LHS) supports literals and RegExes
 Note: Right Hand Side (RHS) supports literals and references
 
 *** Examples : ***
 sed -e 's/LinuxGEEKS/UnixGEEKS/' - replaces 'LinuxGEEKS' with 'UnixGEEKS' on STDIN to STDOUT
 
 Note: Replacements occurs onthe first match, unless 'g' is appended to the s/find/replace/g sequence
 sed -e 's/LinuxGEEKS/UnixGEEKS/Ig' - replaces 'LinuxGEEKS' with 'UnixGEEKS' on STDIN to STDOUT 
	(Case-Insensitive & Global)
 sed -e 's/cat/Tiger/Ig' animals.txt
 
 Task:
  1. Remove All blank lines
  2. Substitute 'cat', regardless of case, with 'Tiger'
  
  sed -ne 's/cat/Tiger/Ipg' animals.txt
  Note: Whenever using '-n' option, you must specify the print modifier 'p'
  sed -ne '/^$/d' -e 's/cat/Tiger/Igp' animals.txt - removes blank lines and substitutes 'cat' with 'Tiger'
  OR  sed -ne '/^$/d'; 's/cat/Tiger/Igp' animals.txt - does the same as the above
  Note: Simply separate multiple commands with semicolons
  
  *** Update Source File - Backup Source File ***
  sed -i.bak -ne '/^$/d'; 's/cat/Tiger/Igp' animals.txt - performs as above, but also replaces the SOURCE 
	file and backs it up.
  
  *** Search & Replace (Text Substitution) ***
  sed -e '/address/s/find/replace/g' file
  sed -e '/Tiger/s/dog/mutt/g' animals2.txt
  (or) sed -ne '/Tiger/s/dog/mutt/gp' animals2.txt
	Search for the lines containing Tiger and replace dog with mutt in those lines.
	
  If we need to search the lines start with Tiger and replace the word dog with mutt then use the following.
  
  sed -ne '/^Tiger/s/dog/mutt/gp' animals2.txt
  
  *** Focus on the Right Hand Side (RHS) of Search & Replace Functions in SED ***
  
  Note : SED reserves a few characters to help with substitutions based on the matched pattern from the 
	LHS & = The value of the LHS (Pattern matched) or the values in the pattern space.
  
  Task:
  Intersperse each line with the word 'Animal '
  sed -ne 's/.*/&/p' animals2.txt - replaces the matched pattern with the matched pattern
  
  sed -ne 's/.*/Animal &/p' animals2.txt - replaces the matched or intersperses 'Animal ' on each line
  sed -ne 's/.*/Animal: &/p' animals2.txt - replaces the matched or intersperses 'Animal ' on each line
  
  sed -ne 's/.*[0-9]/&/p' animals2.txt - returns animals with at least 1 numeric at the end
  
  sed -ne 's/.*[0-9]\{1\}/&/p' animals2.txt - returns animals with at least only 1 numeric at the end
  
  sed -ne 's/[a-z][0-9]\{4\}$/&/pI' animals2.txt - returns animals with 4 numeric values at the end of the name.
  
  sed -ne 's/[a-z][0-9]\{1,4\}$/&/pI' animals2.txt - returns animals with 4 numeric values at the end of the name. 
	- returns animals with atleast 1 up to 4 numeric values
  
  *** Grouping and back references ***
  Note: Segment matches into backreferences using escaped paranthesis: \(RegEx\)
  sed -ne 's/\(.*\)\([0-9]\)/&/p' animals2.txt - This creates 2 variables: \1 & \2
  sed -ne 's/\(.*\)\([0-9]\)$/&/p' animals2.txt - This creates 2 variables: \1 & \2
  sed -ne 's/\(.*\)\([0-9]\)$/\1/p' animals2.txt - This creates 2 variables: \1 & \2 and only prints the first variable.
  
